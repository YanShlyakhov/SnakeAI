import pygame
import random

class Gui:

	def __init__(self, is_basic = True):
		self.win = pygame.image. load("images/win.png") # загружаем картинку победы
		self.lose = pygame.image.load("images/lose.png") # загружаем картинку поражения
		self.barrier = [] # список для хранения всех наших препятствий нашего игрового поля
		self.field = [] # список для хранения всех возможных координат игрового поля минуя нули
		self.indicator =  [[i*11 + 12, 12] for i in range(19)]#[[12, 12], [23,12], [34,12], , [45,12]] 
		self.game = "GAME" # флаг для определения конца игры
		if(is_basic):
			self.basic()
		else:
			self.with_file()
	"""
		берем рандомный файл из списка, генерим карту, сохраняем ее и выводим
		внутри карта выглядит как строка из 40*40 нуль и один, разделенные запятыми
	"""
	def with_file(self):
		levels = ["level1.txt", "level2.txt", "level3.txt"]
		self.level = open(random.choice(levels), "r").read().split(",")
		#убираем послуднюю запятую
		self.level = self.level[:-1]
		self.level = [int(i) for i in self.level]
		name = "kek"
		self.create_image(name)
		self.gui_image = pygame.image.load("images/"+name+".png") 
		
	def basic(self):
		
		self.level = [

					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,

					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				]
		self.gui_image = pygame.image.load("images/giu.png") # Загрузка картинки уровня (вывод нашего изображения)



	def  create_image(self, name):
		"""Создание изображения на основании cписка"""
		screen = pygame.Surface((441, 441), pygame.SRCALPHA, 32) # создаём поверхность 441х411, на которой рисуется изображение
		x = 1 # координата х
		y = 1 # координата у
		for i in self.level: # цикл для прохода по этому списку
			if i == 0:
				pygame.draw.rect(screen, pygame.Color("Grey"), pygame.Rect(x, y, 10, 10)) # рисуем квадрат 10х10 серого цвета на нашей поверхности
			x += 11 # увеличиваем координату на 11, чтобы сделать между квадратами пробел в 1 пиксель (так же как и в змее)
			if x == 441: # если мы дошли до конца экрана
				y += 11
				x = 1
		pygame.image.save(screen, "./images/"+name+".png") # сохраняем в папке image наше изображение
			
	def draw_level(self, window): # метод отрисовки нашего графического интерфейса
		"""Отрисовывает уровень игры"""
		window.blit(self.gui_image, (0, 0)) # (0, 0) - это координаты нашей отрисовки
	
	def init_field(self):
		"""Заполняет списки (field, barrier) с координатами"""
		x = 1
		y = 1
		for i in self.level:
			if i == 0:
				self.barrier.append([x, y]) # добавляем координаты в список barrier
			elif i == 1 and y != 12: # исключаем полосу для завершения игры
				self.field.append([x, y]) # добавляем координаты в список 
			x += 11  # увеличиваем координату на 11, чтобы сделать между квадратами пробел в 1 пиксель (так же как и в змее)
			if x == 441:  # если мы дошли до конца экрана
				y += 11
				x = 1

	def get_new_indicator(self):
		"""Заполняет список координатоми индикатора"""
		self.indicator.append([self.indicator[-1][0] + 11, 12])

	def draw_indicator(self, window):
		"""Отрисовка индикатора"""
		for i in self.indicator:
			pygame.draw.rect(window, pygame.Color("Green"), pygame.Rect(i[0], i[1], 10, 10))
	
	def draw_win(self, window):
		"""Создаёт победный экран"""
		window.blit(self.win, (23,100))

	def draw_lose(self, window):
		"""Отображение экрана пройгрыша"""
		window.blit(self.lose, (23, 100))
	
	def check_win_lose(self, body):
		"""Отслеживает выйграл или проиграл игрок"""
		if len(self.indicator) == 0 or len(body) < 3:
			self.game = "LOSE"
		elif len(self.indicator) == 37:
			self.game = "WIN"
		
if __name__ == "__main__":
	f = open("level3.txt", "w")
	gui = Gui(is_basic=True)
	for i in gui.level:
		f.write(str(i)+",")